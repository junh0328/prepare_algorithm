# Section04-3
# 파이썬 데이터 타입(자료형)
# 리스트, 튜플

# 리스트(순서 o, 중복 o, 수정 o, 삭제 o)

# 선언

a = []
b = list()
c = [1, 2, 3, 4]
d = [10, 100, 'Pen', 'Banana', 'Orange']
e = [10, 100, ['Pen', 'Banana', 'Orange']]

# 인덱싱

# Banana를 추출하고 싶을 때

print(d[3])  # 인덱스 3에 위치한 요소 추출
print(d[-2])  # 뒤에서부터 -2번째 요소 추출
print(e[2][1])  # 2차원 베열 내부에서 인덱스 1에 위치한 요소 추출
print(e[2][-2])  # 2차원 배열 내부에서 뒤에서부터 -2번째 요소 추출

print()

# 슬라이싱

# 범위를 지정한다 (일부분을 추출한다)
print(d[0:3])  # 인덱스 0 부터 인덱스 3 전까지 (2 까지)
print(e[2][1:3])  # 2차원 배열의 인덱스 1부터 3전까지 (2까지)
print(e[2][1:len(e[2])])  # 2차원 배열의 인덱스 1부터 e[2]의 길이 전까지 >>> len(e[2]) = 3

print()

# 연산
print(c + d)
print(c*3)
# print(c[0] + 'hi') error, number + string의 식은 자동 형변환이 불가능하다
print(str(c[0]) + 'hi')

print()

# 리스트 수정, 삭제
c[0] = 77
print(c)

# 슬라이싱 후 대입 기존 리스트의 구간보다 대입하는 구간의 길이가 길다면 리스트의 길이가 늘어난다 (삽입으로 인해)
c[1:2] = [100, 1000, 10000]
print(c)  # [77, 100, 1000, 10000, 3, 4]


c[1] = ['a', 'b', 'c']
print(c)  # [77, ['a', 'b', 'c'], 1000, 10000, 3, 4]

del c[1]
print(c)  # [77, 1000, 10000, 3, 4]

del c[-1]
print(c)  # [77, 1000, 10000, 3]

print()

# 리스트 함수
y = [5, 2, 3, 1, 4]
print(y)

y.append(6)  # push와 같음, 배열의 끝 부분에 해당 요소를 추가한다
print(y)  # [5, 2, 3, 1, 4, 6]

y.sort()  # 오름차 순으로 배열을 정리한다
print(y)  # [1,2,3,4,5,6]

y.reverse()  # 배열을 뒤집어서 반환한다
print(y)  # [6,5,4,3,2,1]

y.insert(2, 7)  # 배열에 인덱스 n 뒤에 m 요소를 삽입한다. (n, m) 인덱스 n 자리에 m 요소를 삽입한다
print(y)  # [6, 5, 7, 4, 3, 2, 1]

y.remove(2)  # 배열에서 요소 m 이 있다면 해당 요소를 삭제한다
print(y)  # [6, 5, 7, 4, 3, 1]

y.pop()  # 배열의 맨 마지막 요소를 제거한다
print(y)  # [6, 5, 7, 4, 3]

ex = [88, 77]
y.extend(ex)  # 배열의 맨 마지막에 해당 변수를 넣어 확장한다
print(y)  # [6, 5, 7, 4, 3, 88, 77]

# 추가(삽입) : append, insert, extend
# 삭제 : del, remove, pop

print()

# 튜플 (순서 o, 중복 o, 수정 x, 삭제 x)

# 수정과 삭제가 불가능하므로 사용자 정보를 받을 때
# 예를 들면 주민번호와 같이 중요한 값들은 최대한 건들이지 않도록 하기위해 튜플로 작성한다

# 수정과 삭제가 불가능하므로 제공되는 메서드도 한정적이다

# 튜플 선언 (리스트와 달리 소괄호로 선언한다)

a = ()
b = (1,)
c = (1, 2, 3, 4)
d = (10, 100, ('a', 'b', 'c'))
# del c[2]: 'tuple' object doesn't support item deletion

# 튜플 참조 리스트와 같이 [ ] 대괄호를 사용하여 참조한다

print(c[2])
print(c[3])
print(d[2][2])

# 튜플 슬라이싱

print(d[2:])
print(d[2][0:2])

# 삽입이 가능하나, 수정, 삭제가 불가능하므로 신중히 진행해야 한다
print(c+d)
print(c*3)

print()

# 튜플 함수

z = (5, 2, 1, 3, 4, 1)

print(z)
print(3 in z)
print(6 not in z)
print(z.index(3))  # 튜플에서 해당 요소가 위치하고 있는 인덱스를 반환합니다
print(z.count(1))  # 튜플에서 해당 요소의 개수를 반환합니다
